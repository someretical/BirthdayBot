generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  id                  String      @id @db.VarChar(32)
  birthdays_enabled   Boolean     @default(false)
  birthday_role_id    String?     @db.VarChar(32)
  birthday_channel_id String?     @db.VarChar(32)
  birthday_message    String      @default("ðŸŽ‰ðŸŽ‰ðŸŽ‰ Happy Birthday {user}!") @db.VarChar(1024)
  Users               GuildUser[]
}

model User {
  id           String @id @db.VarChar(32)
  birthday_utc String @db.Char(8)
  // Introducing ISO 8601 BirthdayBot format
  // 2 chars for the month, 2 chars for the day, 2 chars for the hour, 2 chars for the minute
  // If the start window and the end window have different years, special checking is required
  // But otherwise, the strings can be sorted lexographically which is nice

  leap_year Boolean @default(false)
  // This is needed so the bot can figure out the right dates to display for birthdays adjacent to February 29th on leap years...

  birthday_utc_offset      Int              @db.SmallInt
  accept_birthday_messages Boolean          @default(true)
  PrivateMessageSenders    PrivateMessage[] @relation(name: "PrivateMessageSenders")
  PrivateMessageReceivers  PrivateMessage[] @relation(name: "PrivateMessageReceivers")
  PublicMessageSenders     PublicMessage[]  @relation(name: "PublicMessageSenders")
  PublicMessageReceivers   PublicMessage[]  @relation(name: "PublicMessageReceivers")
  Guilds                   GuildUser[]
}

model GuildUser {
  guild    Guild  @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  guild_id String @db.VarChar(32)
  user     User   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id  String @db.VarChar(32)

  @@id([guild_id, user_id])
}

model PrivateMessage {
  id         BigInt   @id @default(autoincrement())
  sender     User     @relation(name: "PrivateMessageSenders", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId   String   @db.VarChar(32)
  receiver   User     @relation(name: "PrivateMessageReceivers", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiverId String   @db.VarChar(32)
  year       DateTime
  message    String   @db.VarChar(1000)
}

model PublicMessage {
  id         BigInt   @id @default(autoincrement())
  sender     User     @relation(name: "PublicMessageSenders", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  senderId   String   @db.VarChar(32)
  receiver   User     @relation(name: "PublicMessageReceivers", fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiverId String   @db.VarChar(32)
  guildId    String   @db.VarChar(32)
  year       DateTime
  message    String   @db.VarChar(1000)
}
